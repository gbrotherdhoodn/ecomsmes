{% if app_role != "production" %}
upstream app
{
    server localhost:9000;
}

server {
    listen 80 default_server;
    listen [::]:80;
    server_name {{ http_hostname }};

    # used for letsencrypt challenges only
    location /.well-known/acme-challenge {
        root /var/www/letsencrypt;
        try_files $uri $uri/ =404;
    }

    # everything else should redirect to HTTPS
    location / {
        return 301 https://{{ http_hostname }}$request_uri;
    }

    server_tokens off;
}


server {
    #listen [::]:443 ssl http2 ipv6only=on; # managed by Certbot
    listen 443 ssl http2; # managed by Certbot

    server_name  {{ http_hostname }};
    {% if app_role == "production" %}
    # Send nginx logs to graylog2 server
    access_log syslog:server=logs.gramedia.com:12301 graylog2_json;
    error_log syslog:server=logs.gramedia.com:12302;
    {% else %}
    access_log /var/log/nginx/access-{{ http_hostname }}.log;
    error_log /var/log/nginx/error-{{ http_hostname }}.log;
    {% endif %}

    #ssl_certificate /etc/nginx/ssl/{{ domains }}/fullchain1.pem; # managed by Certbot
    #ssl_certificate_key /etc/nginx/ssl/{{ domains }}/privkey1.pem; # managed by Certbot
    #ssl_trusted_certificate /etc/nginx/ssl/{{ domains }}/fullchain1.pem;
    #ssl_dhparam /etc/dhparams.pem; # managed by Certbot

    ssl_session_cache shared:le_nginx_SSL:1m;
    ssl_session_timeout 1440m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";



    location / {
        add_header Pragma no-cache;
        add_header Cache-Control "no-cache";
        uwsgi_pass app;

        proxy_read_timeout 180s;
        proxy_send_timeout 180s;
        include uwsgi_params;
        sendfile on;
        client_max_body_size    20M;
        keepalive_timeout       0;
    }

    {% for loc in http_static_locations %}
    location {{ loc.http_path }} {
    expires 30d;
    add_header Cache-Control "public";
        alias {{ loc.dir_path }};
    }
    {% endfor %}
}
{% endif %}




{% if app_role == "production" %}

upstream app
{
    server localhost:9000;
}

server {
    listen 8080 default_server;
    listen [::]:8080;
    server_name {{ domains }} {{ http_hostname }};

    {% if app_role == "production" %}
    # Send nginx logs to graylog2 server
    access_log syslog:server=logs.gramedia.com:12301 graylog2_json;
    error_log syslog:server=logs.gramedia.com:12302;
    {% else %}
    access_log /var/log/nginx/access-{{ http_hostname }}.log;
    error_log /var/log/nginx/error-{{ http_hostname }}.log;
    {% endif %}


    # used for letsencrypt challenges only
    location /.well-known/acme-challenge {
        root /var/www/letsencrypt;
        try_files $uri $uri/ =404;
    }

    # everything else should redirect to HTTPS

    server_tokens off;

    location / {
        add_header Pragma no-cache;
        add_header Cache-Control "no-cache";
        uwsgi_pass app;

        proxy_read_timeout 180s;
        proxy_send_timeout 180s;
        include uwsgi_params;
        sendfile on;
        client_max_body_size    20M;
        keepalive_timeout       0;
    }

    {% for loc in http_static_locations %}
    location {{ loc.http_path }} {
    expires 1y;
    add_header Cache-Control "public";
        alias {{ loc.dir_path }};
    }
    {% endfor %}
    }
{% endif %}